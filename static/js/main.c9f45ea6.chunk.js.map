{"version":3,"sources":["components/Form.js","components/List.js","serviceWorker.js","index.js","App.js"],"names":["Form","props","className","onSubmit","handleAdd","name","type","value","style","maxWidth","btn","cursor","List","todos","map","todo","i","key","onClick","handleRemove","Boolean","window","location","hostname","match","ReactDOM","render","useState","setTodo","e","preventDefault","target","title","console","log","splice","concat","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAWeA,G,MATF,SAACC,GAAD,OACT,0BAAMC,UAAU,eAAeC,SAAUF,EAAMG,WAC3C,yBAAKF,UAAU,sBACX,2BAAOA,UAAU,sCAAjB,cACA,2BAAOG,KAAK,QAAQC,KAAK,OAAOJ,UAAU,kBAF9C,SAEgE,2BAAOI,KAAK,SAASC,MAAM,MAAML,UAAU,sCCJ/GM,EAAQ,CACRC,SAAU,SAGVC,EAAM,CACNC,OAAQ,WAcGC,EAVF,SAACX,GAAD,OACT,wBAAIC,UAAU,gBACTD,EAAMY,MAAMC,KAAI,SAACC,EAAMC,GACpB,OAAO,wBAAIC,IAAKD,EAAGd,UAAU,sCAAsCM,MAAOA,GAAQO,EAA3E,IAAiF,0BACpFb,UAAU,+CAA+CM,MAAOE,EAChEQ,QAAS,kBAAMjB,EAAMkB,aAAaH,KAFkD,gBCFhFI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCAD,WAAgB,IAAD,EAEFC,mBAAS,IAFP,mBAEnBZ,EAFmB,KAEba,EAFa,KA0B1B,OACI,yBAAK1B,UAAU,gCACX,wBAAIA,UAAU,0CAAd,kBACA,kBAAC,EAAD,CAAME,UAxBI,SAACyB,GACfA,EAAEC,iBAGFF,EAAQ,GAAD,mBAAKb,GAAL,CAAWc,EAAEE,OAAOC,MAAMzB,SACjCsB,EAAEE,OAAOC,MAAMzB,MAAQ,GACvB0B,QAAQC,IAAInB,MAmBR,yBAAKb,UAAU,iBACf,kBAAC,EAAD,CAAMW,MAAOE,EAAMI,aAhBN,SAACH,GAElBD,EAAKoB,OAAOnB,EAAG,GACfY,EAAQb,EAAKqB,gBDlBL,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c9f45ea6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = (props) => (\n    <form className=\"siimple-form\" onSubmit={props.handleAdd}>\n        <div className=\"siimple-form-field\">\n            <label className=\"siimple-label siimple--color-white\">Your todo:</label>\n            <input name=\"title\" type=\"text\" className=\"siimple-input\"/>　<input type=\"submit\" value=\"Add\" className=\"siimple-btn siimple-btn--teal\"/>\n        </div>\n    </form>\n);\n\nexport default Form;\n","import React from 'react';\n\nlet style = {\n    maxWidth: '700px',\n};\n\nlet btn = {\n    cursor: 'pointer'\n};\n\n\nconst List = (props) => (\n    <ul className=\"siimple-list\">\n        {props.todos.map((todo, i) => {\n            return <li key={i} className=\"siimple-list-item siimple--bg-white\" style={style}>{todo} <span\n                className=\"siimple-tag siimple-tag--error siimple-hover\" style={btn}\n                onClick={() => props.handleRemove(i)}>Delete</span></li>\n        })}\n    </ul>\n);\n\nexport default List;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useState} from 'react';\nimport './App.scss'\nimport Form from './components/Form'\nimport List from './components/List'\n\nexport default function App() {\n\n    const [todo, setTodo] = useState([])\n\n    // データ保存\n    const handleAdd = (e) => {\n        e.preventDefault()\n        // todo.push(e.target.title.value) 参照型だから、破壊的操作は更新されない\n        // setTodo(todo.concat(e.target.title.value))\n        setTodo([...todo, e.target.title.value])\n        e.target.title.value = '';\n        console.log(todo)\n    }\n\n    // データ削除\n    const handleRemove = (i) => {\n        // ----------------\n        todo.splice(i, 1)\n        setTodo(todo.concat()) // todoから削除された新しい配列をsetしている\n        // ----------------\n\n        // ----------------\n        // setTodo(todo.splice(i, 1).concat()) // これは要素数1の配列が返ってきて、setしている\n        // ----------------\n    }\n\n    return (\n        <div className=\"siimple-box siimple--bg-dark\">\n            <h1 className=\"siimple-box-title siimple--color-white\">React Todo App</h1>\n            <Form handleAdd={handleAdd}/>\n            <div className=\"siimple-rule\"></div>\n            <List todos={todo} handleRemove={handleRemove}/>\n        </div>\n\n    );\n}\n"],"sourceRoot":""}